// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a logo mockup for a given business name, matching the specified tone and including dental themes.
 *
 * - generateLogoMockup - A function that generates a logo mockup.
 * - GenerateLogoMockupInput - The input type for the generateLogoMockup function.
 * - GenerateLogoMockupOutput - The return type for the generateLogoMockup function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateLogoMockupInputSchema = z.object({
  businessName: z.string().describe('The name of the dental business.'),
  tone: z.string().describe('The brand personality/tone (e.g., Friendly, Professional, Luxury).'),
});
export type GenerateLogoMockupInput = z.infer<typeof GenerateLogoMockupInputSchema>;

const GenerateLogoMockupOutputSchema = z.object({
  logoDataUri: z
    .string()
    .describe(
      'A data URI containing the generated logo image, must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' 
    ),
});
export type GenerateLogoMockupOutput = z.infer<typeof GenerateLogoMockupOutputSchema>;

export async function generateLogoMockup(input: GenerateLogoMockupInput): Promise<GenerateLogoMockupOutput> {
  return generateLogoMockupFlow(input);
}

const generateLogoMockupPrompt = ai.definePrompt({
  name: 'generateLogoMockupPrompt',
  input: {schema: GenerateLogoMockupInputSchema},
  output: {schema: GenerateLogoMockupOutputSchema},
  prompt: `Generate a modern dental clinic logo for the name {{businessName}}. The style should match a {{tone}} brand with a color palette of blue and teal. Include a simple tooth, smile, or dental icon in a clean, minimalist design.

Return the logo as a data URI.
`,
});

const generateLogoMockupFlow = ai.defineFlow(
  {
    name: 'generateLogoMockupFlow',
    inputSchema: GenerateLogoMockupInputSchema,
    outputSchema: GenerateLogoMockupOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: generateLogoMockupPrompt(input).prompt,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    if (!media || !media.url) {
      throw new Error('Failed to generate logo mockup.');
    }

    return {logoDataUri: media.url};
  }
);
